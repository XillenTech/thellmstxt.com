/* eslint-disable react-hooks/exhaustive-deps */
'use client';
import React, { useState, useEffect } from 'react';
import RuleBuilder from './RuleBuilder';
import OutputPreview from './OutputPreview';
import AdSidebar from './AdSidebar';

export interface Rule {
  id: string;
  userAgent: string;
  type: 'Allow' | 'Disallow';
  path: string;
}

const Generator = () => {
  const [rules, setRules] = useState<Rule[]>([]);
  const [generatedContent, setGeneratedContent] = useState('');

  useEffect(() => {
    generateContent();
  }, [rules]);

  const generateContent = () => {
    let content = '# llms.txt\n';
    content += '# Generated by TheLLMsTxt.com\n\n';

    // Group rules by user-agent
    const groupedRules = rules.reduce((acc, rule) => {
      if (!acc[rule.userAgent]) {
        acc[rule.userAgent] = [];
      }
      acc[rule.userAgent].push(rule);
      return acc;
    }, {} as Record<string, Rule[]>);

    // Generate content for each user-agent group
    Object.entries(groupedRules).forEach(([userAgent, userRules]) => {
      content += `User-agent: ${userAgent}\n`;
      userRules.forEach(rule => {
        content += `${rule.type}: ${rule.path}\n`;
      });
      content += '\n';
    });

    if (rules.length === 0) {
      content += 'User-agent: *\n';
      content += '# Add your rules using the generator below\n';
    }

    setGeneratedContent(content);
  };

  const addRule = (rule: Omit<Rule, 'id'>) => {
    const newRule = {
      ...rule,
      id: Date.now().toString()
    };
    setRules([...rules, newRule]);
  };

  const removeRule = (id: string) => {
    setRules(rules.filter(rule => rule.id !== id));
  };

  const resetRules = () => {
    setRules([]);
  };

  return (
    <section id="generator" className="py-20 bg-gradient-to-br from-gray-50 to-blue-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
            Free llms.txt Generator
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Add rules for the user-agents and paths you want to control. Build your file step by step.
          </p>
        </div>

        <div className="grid lg:grid-cols-4 gap-8">
          <div className="lg:col-span-2 space-y-8">
            <RuleBuilder onAddRule={addRule} />
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Current Rules</h3>
              {rules.length === 0 ? (
                <p className="text-gray-500 italic">No rules added yet. Use the form above to add your first rule.</p>
              ) : (
                <div className="space-y-2">
                  {rules.map((rule) => (
                    <div key={rule.id} className="flex items-center justify-between bg-gray-50 p-3 rounded-lg">
                      <div className="flex items-center space-x-4">
                        <span className="text-sm font-medium text-gray-600">User-agent: {rule.userAgent}</span>
                        <span className={`text-sm font-medium ${rule.type === 'Allow' ? 'text-green-600' : 'text-red-600'}`}>
                          {rule.type}: {rule.path}
                        </span>
                      </div>
                      <button
                        onClick={() => removeRule(rule.id)}
                        className="text-red-500 hover:text-red-700 text-sm font-medium"
                      >
                        Remove
                      </button>
                    </div>
                  ))}
                  <button
                    onClick={resetRules}
                    className="mt-4 text-sm text-gray-500 hover:text-gray-700 underline"
                  >
                    Reset All Rules
                  </button>
                </div>
              )}
            </div>
          </div>
          
          <div className="lg:col-span-1">
            <OutputPreview content={generatedContent} />
          </div>
          
          <div className="lg:col-span-1">
            <AdSidebar />
          </div>
        </div>
      </div>
    </section>
  );
};

export default Generator;